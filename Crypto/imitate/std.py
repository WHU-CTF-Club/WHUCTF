from Crypto.Util.number import bytes_to_long, inverse, long_to_bytes
from base64 import b64decode
from sage.all import gcd
# from math import gcd

def b64urlDecode(data):
    to_pad = 4 - len(data) % 4
    data += to_pad * b'='
    return b64decode(data.replace(b'-', b'+').replace(b'_', b'/'))


p = 60699671043959864930192653458667491948182260386734436978995113729505181882659
q = 103680668771730609245630123974535846151128117311784292994494066264158419199927
n = 6293382488061810276916627737163880207842743081178039592411868680436823738835288418797002162408942628945871363587961731272237124393922402523427454375365893
# d = 2486739290947840745396234064445974668695480031588057330745956503175183294030461755952931944965786063026044442037786857065245155137916307733670467764634337
gift = 62385476978700501214089568185195649659274934363059744211931165834781435414849228446978742796363227760030554566402307253032004623212196365620974775430516021958860747745193274456246017264262999271411031601011550197243951058824991129679927663692540286012424727260428137908706271075996269463132650147692707777400
Mod = 139783530492499989366806186190970201707045784617955510994670668264365125613780534146207604662234972781205415792315794694804125806787962550504358642185835486015743979918457538944006966377376366330483194448343751231567467051085883090503081476738133080325775972135216360160821424559840800702984626714613403410341
Ca = b'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.TWF5YjM.NGI5N2IwYjUyY2Y0ZTlkMTJlZTFkNjhkYTE5MTRlZTUwY2UxOGRjMWViNGZkZDE5YWZiNDIzMGY3OWE2ZmI5YzQwNTI3ZGM1OGQ0OTIxZmI5ZWI3Zjc1ZGY2ZjBhZGI2MWU1YWQ1MWM4MjA4M2Y5M2IzZWZlZDVjZTM2YWRjNDQ'
Cb = b'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.Q3J5cDc.MWJjNTI4NDIzNGU2MjgxZmY4ZDY4YmUwZTNmMWM3ZmQ0OTNmNDAwMDMzNTkyMjRmNjcwOWVmZTM0MjM2OGM0ZDc5ZDBmNTYwYzAzZGQ4ZDU4ZDRhNjk2NzU1MDU3NjVlZDBjNTgwOWJkMjViZWZlNTlmODY3NTZkYzI0NmJmZg'
C = 3454932108453579916131399430502511588230619545318881430991349901038902611605453734080149058230878714433909067049429244397457303301903246046075369382663670798080063018482644701084995319681682533608988693424511755031

# STEP 1

Ca = Ca.split(b'.')
Cb = Cb.split(b'.')

m1 = b64urlDecode(Ca[1])
m2 = b64urlDecode(Cb[1])

Ca = int(b64urlDecode(Ca[2]).decode(), 16)
Cb = int(b64urlDecode(Cb[2]).decode(), 16)



Na = Ca ** 0x10001 - bytes_to_long(m1)
Nb = Cb ** 0x10001 - bytes_to_long(m2)

print("Start gcd.")
N = gcd(Na, Nb)
print(N)

Step 2
N = n
e = 0x10001
d = (gift * inverse(e, Mod) * inverse(N, Mod)) % Mod % N
print(d)
print(long_to_bytes(pow(pow(bytes_to_long(b'May'), d, N), e, N)))

import random


def divide_pq(e, d, n):
    k = e * d - 1
    while True:
        g = random.randint(2, n - 1)
        t = k
        while True:
            if t % 2 != 0:
                break
            t //= 2
            x = pow(g, t, n)
            if x > 1 and gcd(x - 1, n) > 1:
                p = gcd(x - 1, n)
                return p, n // p


P, Q = divide_pq(e, d, N)

P, Q = p, q
flag = (C * inverse(p, Mod)) % Mod
print(long_to_bytes(flag))
